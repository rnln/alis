[
{ "key": "ctrl+[KeyW]",                       "command": "editor.emmet.action.wrapWithAbbreviation" },
// { "key": "ctrl+[KeyW]",                       "command": "-workbench.action.switchWindow" },
{ "key": "cmd+[KeyK] shift+cmd+[KeyD]",       "command": "editor.action.moveSelectionToPreviousFindMatch" },
{ "key": "cmd+[KeyK] [KeyN]",                 "command": "notifications.clearAll" },
{ "key": "cmd+alt+[Equal]",                   "command": "wwm.aligncode",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "alt+[Space]",                       "command": "editor.action.triggerSuggest",
																								 "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
{ "key": "ctrl+[Space]",                      "command": "-editor.action.triggerSuggest",
																								 "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
{ "key": "alt+[Space]",                       "command": "toggleSuggestionDetails",
																								 "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+[Space]",                      "command": "-toggleSuggestionDetails",
																								 "when": "suggestWidgetVisible && textInputFocus" },

// Keyboard layout-independent bindings (https://code.visualstudio.com/docs/getstarted/keybindings#_keyboard-layoutindependent-bindings)
{ "key": "[Escape] [Escape]",                 "command": "workbench.action.exitZenMode",
																								 "when": "inZenMode" },
{ "key": "shift+[Escape]",                    "command": "closeReferenceSearch",
																								 "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
{ "key": "[Escape]",                          "command": "closeReferenceSearch",
																								 "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
{ "key": "[Escape]",                          "command": "editor.closeTestPeek",
																								 "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek" },
{ "key": "shift+[Escape]",                    "command": "cancelSelection",
																								 "when": "editorHasSelection && textInputFocus" },
{ "key": "[Escape]",                          "command": "cancelSelection",
																								 "when": "editorHasSelection && textInputFocus" },
{ "key": "cmd+[ArrowDown]",                   "command": "cursorBottom",
																								 "when": "textInputFocus" },
{ "key": "shift+cmd+[ArrowDown]",             "command": "cursorBottomSelect",
																								 "when": "textInputFocus" },
{ "key": "shift+alt+cmd+[ArrowDown]",         "command": "cursorColumnSelectDown",
																								 "when": "textInputFocus" },
{ "key": "shift+alt+cmd+[ArrowLeft]",         "command": "cursorColumnSelectLeft",
																								 "when": "textInputFocus" },
{ "key": "shift+alt+cmd+[PageDown]",          "command": "cursorColumnSelectPageDown",
																								 "when": "textInputFocus" },
{ "key": "shift+alt+cmd+[PageUp]",            "command": "cursorColumnSelectPageUp",
																								 "when": "textInputFocus" },
{ "key": "shift+alt+cmd+[ArrowRight]",        "command": "cursorColumnSelectRight",
																								 "when": "textInputFocus" },
{ "key": "shift+alt+cmd+[ArrowUp]",           "command": "cursorColumnSelectUp",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[KeyN]",                       "command": "cursorDown",
																								 "when": "textInputFocus" },
{ "key": "[ArrowDown]",                       "command": "cursorDown",
																								 "when": "textInputFocus" },
{ "key": "shift+[ArrowDown]",                 "command": "cursorDownSelect",
																								 "when": "textInputFocus" },
{ "key": "cmd+[ArrowRight]",                  "command": "cursorEnd",
																								 "when": "textInputFocus",
																									"args": {"sticky":false} },
{ "key": "[End]",                             "command": "cursorEnd",
																								 "when": "textInputFocus",
																									"args": {"sticky":false} },
{ "key": "shift+cmd+[ArrowRight]",            "command": "cursorEndSelect",
																								 "when": "textInputFocus",
																									"args": {"sticky":false} },
{ "key": "shift+[End]",                       "command": "cursorEndSelect",
																								 "when": "textInputFocus",
																									"args": {"sticky":false} },
{ "key": "cmd+[ArrowLeft]",                   "command": "cursorHome",
																								 "when": "textInputFocus" },
{ "key": "[Home]",                            "command": "cursorHome",
																								 "when": "textInputFocus" },
{ "key": "shift+cmd+[ArrowLeft]",             "command": "cursorHomeSelect",
																								 "when": "textInputFocus" },
{ "key": "shift+[Home]",                      "command": "cursorHomeSelect",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[KeyB]",                       "command": "cursorLeft",
																								 "when": "textInputFocus" },
{ "key": "[ArrowLeft]",                       "command": "cursorLeft",
																								 "when": "textInputFocus" },
{ "key": "shift+[ArrowLeft]",                 "command": "cursorLeftSelect",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[KeyE]",                       "command": "cursorLineEnd",
																								 "when": "textInputFocus" },
{ "key": "ctrl+shift+[KeyE]",                 "command": "cursorLineEndSelect",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[KeyA]",                       "command": "cursorLineStart",
																								 "when": "textInputFocus" },
{ "key": "ctrl+shift+[KeyA]",                 "command": "cursorLineStartSelect",
																								 "when": "textInputFocus" },
{ "key": "[PageDown]",                        "command": "cursorPageDown",
																								 "when": "textInputFocus" },
{ "key": "shift+[PageDown]",                  "command": "cursorPageDownSelect",
																								 "when": "textInputFocus" },
{ "key": "[PageUp]",                          "command": "cursorPageUp",
																								 "when": "textInputFocus" },
{ "key": "shift+[PageUp]",                    "command": "cursorPageUpSelect",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[KeyF]",                       "command": "cursorRight",
																								 "when": "textInputFocus" },
{ "key": "[ArrowRight]",                      "command": "cursorRight",
																								 "when": "textInputFocus" },
{ "key": "shift+[ArrowRight]",                "command": "cursorRightSelect",
																								 "when": "textInputFocus" },
{ "key": "cmd+[ArrowUp]",                     "command": "cursorTop",
																								 "when": "textInputFocus" },
{ "key": "shift+cmd+[ArrowUp]",               "command": "cursorTopSelect",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[KeyP]",                       "command": "cursorUp",
																								 "when": "textInputFocus" },
{ "key": "[ArrowUp]",                         "command": "cursorUp",
																								 "when": "textInputFocus" },
{ "key": "shift+[ArrowUp]",                   "command": "cursorUpSelect",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[Backspace]",                  "command": "deleteLeft",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[KeyH]",                       "command": "deleteLeft",
																								 "when": "textInputFocus" },
{ "key": "shift+[Backspace]",                 "command": "deleteLeft",
																								 "when": "textInputFocus" },
{ "key": "[Backspace]",                       "command": "deleteLeft",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[Delete]",                     "command": "deleteRight",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[KeyD]",                       "command": "deleteRight",
																								 "when": "textInputFocus" },
{ "key": "[Delete]",                          "command": "deleteRight",
																								 "when": "textInputFocus" },
{ "key": "cmd+[KeyA]",                        "command": "editor.action.selectAll" },
{ "key": "cmd+[KeyC]",                        "command": "execCopy" },
{ "key": "cmd+[KeyX]",                        "command": "execCut" },
{ "key": "cmd+[KeyV]",                        "command": "execPaste" },
{ "key": "cmd+[KeyL]",                        "command": "expandLineSelection",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[KeyO]",                       "command": "lineBreakInsert",
																								 "when": "textInputFocus && !editorReadonly" },
{ "key": "shift+[Tab]",                       "command": "outdent",
																								 "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "shift+cmd+[KeyZ]",                  "command": "redo" },
{ "key": "ctrl+[PageDown]",                   "command": "scrollLineDown",
																								 "when": "textInputFocus" },
{ "key": "ctrl+[PageUp]",                     "command": "scrollLineUp",
																								 "when": "textInputFocus" },
{ "key": "cmd+[PageDown]",                    "command": "scrollPageDown",
																								 "when": "textInputFocus" },
{ "key": "cmd+[PageUp]",                      "command": "scrollPageUp",
																								 "when": "textInputFocus" },
{ "key": "[Tab]",                             "command": "tab",
																								 "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "cmd+[KeyZ]",                        "command": "undo" },
{ "key": "shift+[ArrowDown]",                 "command": "cursorColumnSelectDown",
																								 "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+[ArrowLeft]",                 "command": "cursorColumnSelectLeft",
																								 "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+[PageDown]",                  "command": "cursorColumnSelectPageDown",
																								 "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+[PageUp]",                    "command": "cursorColumnSelectPageUp",
																								 "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+[ArrowRight]",                "command": "cursorColumnSelectRight",
																								 "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+[ArrowUp]",                   "command": "cursorColumnSelectUp",
																								 "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+[Escape]",                    "command": "removeSecondaryCursors",
																								 "when": "editorHasMultipleSelections && textInputFocus" },
{ "key": "[Escape]",                          "command": "removeSecondaryCursors",
																								 "when": "editorHasMultipleSelections && textInputFocus" },
{ "key": "[F12]",                             "command": "goToNextReference",
																								 "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "[F4]",                              "command": "goToNextReference",
																								 "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "shift+[F12]",                       "command": "goToPreviousReference",
																								 "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "shift+[F4]",                        "command": "goToPreviousReference",
																								 "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "shift+[Enter]",                     "command": "refactorPreview.apply",
																								 "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'" },
{ "key": "alt+[Enter]",                       "command": "testing.editFocusedTest",
																								 "when": "focusedView == 'workbench.view.testing'" },
{ "key": "[Escape]",                          "command": "notebook.cell.quitEdit",
																								 "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible" },
{ "key": "ctrl+[Enter]",                      "command": "notebook.cell.quitEdit",
																								 "when": "inputFocus && notebookEditorFocused && notebookCellType == 'markup'" },
{ "key": "cmd+[KeyF]",                        "command": "actions.find",
																								 "when": "editorFocus || editorIsOpen" },
{ "key": "cmd+[KeyE]",                        "command": "actions.findWithSelection" },
{ "key": "[Enter]",                           "command": "breakpointWidget.action.acceptInput",
																								 "when": "breakpointWidgetVisible && inBreakpointWidget" },
{ "key": "shift+[Escape]",                    "command": "closeBreakpointWidget",
																								 "when": "breakpointWidgetVisible && textInputFocus" },
{ "key": "[Escape]",                          "command": "closeBreakpointWidget",
																								 "when": "breakpointWidgetVisible && textInputFocus" },
{ "key": "cmd+[KeyU]",                        "command": "cursorUndo",
																								 "when": "textInputFocus" },
{ "key": "alt+[ArrowRight]",                  "command": "cursorWordEndRight",
																								 "when": "textInputFocus" },
{ "key": "shift+alt+[ArrowRight]",            "command": "cursorWordEndRightSelect",
																								 "when": "textInputFocus" },
{ "key": "alt+[ArrowLeft]",                   "command": "cursorWordLeft",
																								 "when": "textInputFocus" },
{ "key": "shift+alt+[ArrowLeft]",             "command": "cursorWordLeftSelect",
																								 "when": "textInputFocus" },
{ "key": "ctrl+alt+[ArrowLeft]",              "command": "cursorWordPartLeft",
																								 "when": "textInputFocus" },
{ "key": "ctrl+shift+alt+[ArrowLeft]",        "command": "cursorWordPartLeftSelect",
																								 "when": "textInputFocus" },
{ "key": "ctrl+alt+[ArrowRight]",             "command": "cursorWordPartRight",
																								 "when": "textInputFocus" },
{ "key": "ctrl+shift+alt+[ArrowRight]",       "command": "cursorWordPartRightSelect",
																								 "when": "textInputFocus" },
{ "key": "cmd+[Backspace]",                   "command": "deleteAllLeft",
																								 "when": "textInputFocus && !editorReadonly" },
{ "key": "cmd+[Delete]",                      "command": "deleteAllRight",
																								 "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+[KeyK]",                       "command": "deleteAllRight",
																								 "when": "textInputFocus && !editorReadonly" },
{ "key": "alt+[Backspace]",                   "command": "deleteWordLeft",
																								 "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+alt+[Backspace]",              "command": "deleteWordPartLeft",
																								 "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+alt+[Delete]",                 "command": "deleteWordPartRight",
																								 "when": "textInputFocus && !editorReadonly" },
{ "key": "alt+[Delete]",                      "command": "deleteWordRight",
																								 "when": "textInputFocus && !editorReadonly" },
{ "key": "cmd+[KeyK] cmd+[KeyC]",             "command": "editor.action.addCommentLine",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+[KeyD]",                        "command": "editor.action.addSelectionToNextFindMatch",
																								 "when": "editorFocus" },
{ "key": "alt+cmd+[Period]",                  "command": "editor.action.autoFix",
																								 "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/" },
{ "key": "shift+alt+[KeyA]",                  "command": "editor.action.blockComment",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "[Escape]",                          "command": "editor.action.cancelSelectionAnchor",
																								 "when": "editorTextFocus && selectionAnchorSet" },
{ "key": "cmd+[F2]",                          "command": "editor.action.changeAll",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+[KeyC]",                        "command": "editor.action.clipboardCopyAction" },
{ "key": "cmd+[KeyX]",                        "command": "editor.action.clipboardCutAction" },
{ "key": "cmd+[KeyV]",                        "command": "editor.action.clipboardPasteAction" },
{ "key": "cmd+[Slash]",                       "command": "editor.action.commentLine",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+alt+[ArrowDown]",             "command": "editor.action.copyLinesDownAction",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+alt+[ArrowUp]",               "command": "editor.action.copyLinesUpAction",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+[KeyK] cmd+[KeyK]",             "command": "editor.action.defineKeybinding",
																								 "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'" },
{ "key": "shift+cmd+[KeyK]",                  "command": "editor.action.deleteLines",
																								 "when": "textInputFocus && !editorReadonly" },
{ "key": "[F7]",                              "command": "editor.action.diffReview.next",
																								 "when": "isInDiffEditor" },
{ "key": "shift+[F7]",                        "command": "editor.action.diffReview.prev",
																								 "when": "isInDiffEditor" },
{ "key": "alt+[F3]",                          "command": "editor.action.dirtydiff.next",
																								 "when": "editorTextFocus" },
{ "key": "shift+alt+[F3]",                    "command": "editor.action.dirtydiff.previous",
																								 "when": "editorTextFocus" },
{ "key": "[Enter]",                           "command": "editor.action.extensioneditor.findNext",
																								 "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "shift+[Enter]",                     "command": "editor.action.extensioneditor.findPrevious",
																								 "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "cmd+[KeyF]",                        "command": "editor.action.extensioneditor.showfind",
																								 "when": "!editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "shift+alt+[KeyF]",                  "command": "editor.action.formatDocument",
																								 "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor" },
{ "key": "shift+alt+[KeyF]",                  "command": "editor.action.formatDocument.none",
																								 "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly" },
{ "key": "cmd+[KeyK] cmd+[KeyF]",             "command": "editor.action.formatSelection",
																								 "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" },
{ "key": "cmd+[F12]",                         "command": "editor.action.goToImplementation",
																								 "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor" },
{ "key": "shift+[F12]",                       "command": "editor.action.goToReferences",
																								 "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "shift+cmd+[Period]",                "command": "editor.action.inPlaceReplace.down",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+[Comma]",                 "command": "editor.action.inPlaceReplace.up",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+[BracketRight]",                "command": "editor.action.indentLines",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "[Escape]",                          "command": "editor.action.inlineSuggest.hide",
																								 "when": "inlineSuggestionVisible" },
{ "key": "alt+[BracketRight]",                "command": "editor.action.inlineSuggest.showNext",
																								 "when": "inlineSuggestionVisible && !editorReadonly" },
{ "key": "alt+[BracketLeft]",                 "command": "editor.action.inlineSuggest.showPrevious",
																								 "when": "inlineSuggestionVisible && !editorReadonly" },
{ "key": "alt+cmd+[ArrowUp]",                 "command": "editor.action.insertCursorAbove",
																								 "when": "editorTextFocus" },
{ "key": "shift+alt+[KeyI]",                  "command": "editor.action.insertCursorAtEndOfEachLineSelected",
																								 "when": "editorTextFocus" },
{ "key": "alt+cmd+[ArrowDown]",               "command": "editor.action.insertCursorBelow",
																								 "when": "editorTextFocus" },
{ "key": "cmd+[Enter]",                       "command": "editor.action.insertLineAfter",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+[Enter]",                 "command": "editor.action.insertLineBefore",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "ctrl+[KeyJ]",                       "command": "editor.action.joinLines",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+[Backslash]",             "command": "editor.action.jumpToBracket",
																								 "when": "editorTextFocus" },
{ "key": "shift+cmd+[F2]",                    "command": "editor.action.linkedEditing",
																								 "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
{ "key": "alt+[F8]",                          "command": "editor.action.marker.next",
																								 "when": "editorFocus" },
{ "key": "[F8]",                              "command": "editor.action.marker.nextInFiles",
																								 "when": "editorFocus" },
{ "key": "shift+alt+[F8]",                    "command": "editor.action.marker.prev",
																								 "when": "editorFocus" },
{ "key": "shift+[F8]",                        "command": "editor.action.marker.prevInFiles",
																								 "when": "editorFocus" },
{ "key": "alt+[ArrowDown]",                   "command": "editor.action.moveLinesDownAction",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "alt+[ArrowUp]",                     "command": "editor.action.moveLinesUpAction",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+[KeyK] cmd+[KeyD]",             "command": "editor.action.moveSelectionToNextFindMatch",
																								 "when": "editorFocus" },
{ "key": "[F3]",                              "command": "editor.action.nextMatchFindAction",
																								 "when": "editorFocus" },
{ "key": "cmd+[KeyG]",                        "command": "editor.action.nextMatchFindAction",
																								 "when": "editorFocus" },
{ "key": "[Enter]",                           "command": "editor.action.nextMatchFindAction",
																								 "when": "editorFocus && findInputFocussed" },
{ "key": "cmd+[F3]",                          "command": "editor.action.nextSelectionMatchFindAction",
																								 "when": "editorFocus" },
{ "key": "shift+alt+[KeyO]",                  "command": "editor.action.organizeImports",
																								 "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/" },
{ "key": "cmd+[BracketLeft]",                 "command": "editor.action.outdentLines",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "alt+[F12]",                         "command": "editor.action.peekDefinition",
																								 "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "shift+cmd+[F12]",                   "command": "editor.action.peekImplementation",
																								 "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "shift+[F3]",                        "command": "editor.action.previousMatchFindAction",
																								 "when": "editorFocus" },
{ "key": "shift+cmd+[KeyG]",                  "command": "editor.action.previousMatchFindAction",
																								 "when": "editorFocus" },
{ "key": "shift+[Enter]",                     "command": "editor.action.previousMatchFindAction",
																								 "when": "editorFocus && findInputFocussed" },
{ "key": "shift+cmd+[F3]",                    "command": "editor.action.previousSelectionMatchFindAction",
																								 "when": "editorFocus" },
{ "key": "cmd+[Period]",                      "command": "editor.action.quickFix",
																								 "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
{ "key": "ctrl+shift+[KeyR]",                 "command": "editor.action.refactor",
																								 "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
{ "key": "cmd+[KeyK] cmd+[KeyU]",             "command": "editor.action.removeCommentLine",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "[F2]",                              "command": "editor.action.rename",
																								 "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
{ "key": "[F12]",                             "command": "editor.action.revealDefinition",
																								 "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
{ "key": "cmd+[KeyK] [F12]",                  "command": "editor.action.revealDefinitionAside",
																								 "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
{ "key": "cmd+[KeyK] cmd+[KeyK]",             "command": "editor.action.selectFromAnchorToCursor",
																								 "when": "editorTextFocus && selectionAnchorSet" },
{ "key": "shift+cmd+[KeyL]",                  "command": "editor.action.selectHighlights",
																								 "when": "editorFocus" },
{ "key": "cmd+[KeyK] cmd+[KeyB]",             "command": "editor.action.setSelectionAnchor",
																								 "when": "editorTextFocus" },
{ "key": "alt+[F1]",                          "command": "editor.action.showAccessibilityHelp" },
{ "key": "shift+[F10]",                       "command": "editor.action.showContextMenu",
																								 "when": "textInputFocus" },
{ "key": "cmd+[KeyK] cmd+[KeyI]",             "command": "editor.action.showHover",
																								 "when": "editorTextFocus" },
{ "key": "ctrl+shift+[ArrowRight]",           "command": "editor.action.smartSelect.expand",
																								 "when": "editorTextFocus" },
{ "key": "ctrl+shift+cmd+[ArrowRight]",       "command": "editor.action.smartSelect.expand",
																								 "when": "editorTextFocus" },
{ "key": "ctrl+shift+[ArrowLeft]",            "command": "editor.action.smartSelect.shrink",
																								 "when": "editorTextFocus" },
{ "key": "ctrl+shift+cmd+[ArrowLeft]",        "command": "editor.action.smartSelect.shrink",
																								 "when": "editorTextFocus" },
{ "key": "alt+cmd+[KeyF]",                    "command": "editor.action.startFindReplaceAction",
																								 "when": "editorFocus || editorIsOpen" },
{ "key": "ctrl+shift+[KeyM]",                 "command": "editor.action.toggleTabFocusMode" },
{ "key": "alt+[KeyZ]",                        "command": "editor.action.toggleWordWrap" },
{ "key": "ctrl+[KeyT]",                       "command": "editor.action.transposeLetters",
																								 "when": "textInputFocus && !editorReadonly" },
{ "key": "shift+cmd+[Space]",                 "command": "editor.action.triggerParameterHints",
																								 "when": "editorHasSignatureHelpProvider && editorTextFocus" },
{ "key": "cmd+[KeyI]",                        "command": "editor.action.triggerSuggest",
																								 "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
{ "key": "alt+[Escape]",                      "command": "editor.action.triggerSuggest",
																								 "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
{ "key": "ctrl+[Space]",                      "command": "editor.action.triggerSuggest",
																								 "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
{ "key": "cmd+[KeyK] cmd+[KeyX]",             "command": "editor.action.trimTrailingWhitespace",
																								 "when": "editorTextFocus && !editorReadonly" },
{ "key": "[Enter]",                           "command": "editor.action.webvieweditor.findNext",
																								 "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "shift+[Enter]",                     "command": "editor.action.webvieweditor.findPrevious",
																								 "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "[Escape]",                          "command": "editor.action.webvieweditor.hideFind",
																								 "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "cmd+[KeyF]",                        "command": "editor.action.webvieweditor.showFind",
																								 "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "[F7]",                              "command": "editor.action.wordHighlight.next",
																								 "when": "editorTextFocus && hasWordHighlights" },
{ "key": "shift+[F7]",                        "command": "editor.action.wordHighlight.prev",
																								 "when": "editorTextFocus && hasWordHighlights" },
{ "key": "[Escape]",                          "command": "editor.cancelOperation",
																								 "when": "cancellableOperation" },
{ "key": "[Escape]",                          "command": "editor.debug.action.closeExceptionWidget",
																								 "when": "exceptionWidgetVisible" },
{ "key": "cmd+[KeyK] cmd+[KeyI]",             "command": "editor.debug.action.showDebugHover",
																								 "when": "editorTextFocus && inDebugMode" },
{ "key": "[F9]",                              "command": "editor.debug.action.toggleBreakpoint",
																								 "when": "debuggersAvailable && editorTextFocus" },
{ "key": "[Tab]",                             "command": "editor.emmet.action.expandAbbreviation",
																								 "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "alt+cmd+[BracketLeft]",             "command": "editor.fold",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Digit0]",           "command": "editor.foldAll",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Slash]",            "command": "editor.foldAllBlockComments",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Minus]",            "command": "editor.foldAllExcept",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Digit8]",           "command": "editor.foldAllMarkerRegions",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Digit1]",           "command": "editor.foldLevel1",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Digit2]",           "command": "editor.foldLevel2",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Digit3]",           "command": "editor.foldLevel3",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Digit4]",           "command": "editor.foldLevel4",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Digit5]",           "command": "editor.foldLevel5",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Digit6]",           "command": "editor.foldLevel6",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Digit7]",           "command": "editor.foldLevel7",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[BracketLeft]",      "command": "editor.foldRecursively",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "[F12]",                             "command": "editor.gotoNextSymbolFromResult",
																								 "when": "hasSymbols" },
{ "key": "[Escape]",                          "command": "editor.gotoNextSymbolFromResult.cancel",
																								 "when": "hasSymbols" },
{ "key": "cmd+[KeyK] cmd+[KeyL]",             "command": "editor.toggleFold",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "alt+cmd+[BracketRight]",            "command": "editor.unfold",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[KeyJ]",             "command": "editor.unfoldAll",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Equal]",            "command": "editor.unfoldAllExcept",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[Digit9]",           "command": "editor.unfoldAllMarkerRegions",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+[KeyK] cmd+[BracketRight]",     "command": "editor.unfoldRecursively",
																								 "when": "editorTextFocus && foldingEnabled" },
{ "key": "[Tab]",                             "command": "insertSnippet",
																								 "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode" },
{ "key": "ctrl+[Enter]",                      "command": "interactive.execute",
																								 "when": "resourceScheme == 'vscode-interactive'" },
{ "key": "ctrl+[Enter]",                      "command": "notebook.cell.execute",
																								 "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0" },
{ "key": "alt+[Enter]",                       "command": "notebook.cell.executeAndInsertBelow",
																								 "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0" },
{ "key": "shift+[Enter]",                     "command": "notebook.cell.executeAndSelectBelow",
																								 "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0" },
{ "key": "shift+cmd+[KeyV]",                  "command": "notebook.cell.pasteAbove",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "[ArrowDown]",                       "command": "notebook.focusNextEditor",
																								 "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
{ "key": "[ArrowUp]",                         "command": "notebook.focusPreviousEditor",
																								 "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
{ "key": "shift+alt+[KeyF]",                  "command": "notebook.formatCell",
																								 "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'" },
{ "key": "ctrl+[Enter]",                      "command": "openReferenceToSide",
																								 "when": "listFocus && referenceSearchVisible && !inputFocus" },
{ "key": "[Enter]",                           "command": "repl.action.acceptInput",
																								 "when": "inDebugRepl && textInputFocus" },
{ "key": "cmd+[KeyF]",                        "command": "repl.action.filter",
																								 "when": "inDebugRepl && textInputFocus" },
{ "key": "shift+cmd+[KeyR]",                  "command": "rerunSearchEditorSearch",
																								 "when": "inSearchEditor" },
{ "key": "[Escape]",                          "command": "search.action.focusQueryEditorWidget",
																								 "when": "inSearchEditor" },
{ "key": "shift+cmd+[Backspace]",             "command": "search.searchEditor.action.deleteFileResults",
																								 "when": "inSearchEditor" },
{ "key": "[Escape]",                          "command": "settings.action.clearSearchResults",
																								 "when": "inSettingsEditor && inSettingsSearch" },
{ "key": "[ArrowDown]",                       "command": "settings.action.focusSettingsFile",
																								 "when": "inSettingsSearch && !suggestWidgetVisible" },
{ "key": "cmd+[KeyF]",                        "command": "settings.action.search",
																								 "when": "inSettingsEditor" },
{ "key": "cmd+[Slash]",                       "command": "toggleExplainMode",
																								 "when": "suggestWidgetVisible" },
{ "key": "cmd+[KeyK] [F2]",                   "command": "togglePeekWidgetFocus",
																								 "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "[Escape]",                          "command": "welcome.goBack",
																								 "when": "inWelcome && activeEditor == 'gettingStartedPage'" },
{ "key": "alt+[F5]",                          "command": "workbench.action.editor.nextChange",
																								 "when": "editorTextFocus" },
{ "key": "shift+alt+[F5]",                    "command": "workbench.action.editor.previousChange",
																								 "when": "editorTextFocus" },
{ "key": "shift+[Escape]",                    "command": "workbench.action.hideComment",
																								 "when": "commentEditorFocused" },
{ "key": "[Escape]",                          "command": "workbench.action.hideComment",
																								 "when": "commentEditorFocused" },
{ "key": "cmd+[Enter]",                       "command": "workbench.action.submitComment",
																								 "when": "commentEditorFocused" },
{ "key": "alt+[F8]",                          "command": "testing.goToNextMessage",
																								 "when": "editorFocus && testing.isPeekVisible" },
{ "key": "shift+alt+[F8]",                    "command": "testing.goToPreviousMessage",
																								 "when": "editorFocus && testing.isPeekVisible" },
{ "key": "shift+[Escape]",                    "command": "closeFindWidget",
																								 "when": "editorFocus && findWidgetVisible && !isComposing" },
{ "key": "[Escape]",                          "command": "closeFindWidget",
																								 "when": "editorFocus && findWidgetVisible && !isComposing" },
{ "key": "alt+cmd+[Enter]",                   "command": "editor.action.replaceAll",
																								 "when": "editorFocus && findWidgetVisible" },
{ "key": "cmd+[Enter]",                       "command": "editor.action.replaceAll",
																								 "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
{ "key": "shift+cmd+[Digit1]",                "command": "editor.action.replaceOne",
																								 "when": "editorFocus && findWidgetVisible" },
{ "key": "[Enter]",                           "command": "editor.action.replaceOne",
																								 "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
{ "key": "alt+[Enter]",                       "command": "editor.action.selectAllMatches",
																								 "when": "editorFocus && findWidgetVisible" },
{ "key": "alt+cmd+[KeyC]",                    "command": "toggleFindCaseSensitive",
																								 "when": "editorFocus" },
{ "key": "alt+cmd+[KeyL]",                    "command": "toggleFindInSelection",
																								 "when": "editorFocus" },
{ "key": "alt+cmd+[KeyR]",                    "command": "toggleFindRegex",
																								 "when": "editorFocus" },
{ "key": "alt+cmd+[KeyW]",                    "command": "toggleFindWholeWord",
																								 "when": "editorFocus" },
{ "key": "alt+cmd+[KeyP]",                    "command": "togglePreserveCase",
																								 "when": "editorFocus" },
{ "key": "[Tab]",                             "command": "jumpToNextSnippetPlaceholder",
																								 "when": "editorTextFocus && hasNextTabstop && inSnippetMode" },
{ "key": "shift+[Tab]",                       "command": "jumpToPrevSnippetPlaceholder",
																								 "when": "editorTextFocus && hasPrevTabstop && inSnippetMode" },
{ "key": "[Escape]",                          "command": "leaveEditorMessage",
																								 "when": "messageVisible" },
{ "key": "shift+[Escape]",                    "command": "leaveSnippet",
																								 "when": "editorTextFocus && inSnippetMode" },
{ "key": "[Escape]",                          "command": "leaveSnippet",
																								 "when": "editorTextFocus && inSnippetMode" },
{ "key": "shift+[Escape]",                    "command": "closeDirtyDiff",
																								 "when": "dirtyDiffVisible" },
{ "key": "[Escape]",                          "command": "closeDirtyDiff",
																								 "when": "dirtyDiffVisible" },
{ "key": "shift+[Escape]",                    "command": "closeMarkersNavigation",
																								 "when": "editorFocus && markersNavigationVisible" },
{ "key": "[Escape]",                          "command": "closeMarkersNavigation",
																								 "when": "editorFocus && markersNavigationVisible" },
{ "key": "[Escape]",                          "command": "notifications.hideToasts",
																								 "when": "notificationToastsVisible" },
{ "key": "shift+[Escape]",                    "command": "closeParameterHints",
																								 "when": "editorFocus && parameterHintsVisible" },
{ "key": "[Escape]",                          "command": "closeParameterHints",
																								 "when": "editorFocus && parameterHintsVisible" },
{ "key": "ctrl+[KeyN]",                       "command": "showNextParameterHint",
																								 "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "alt+[ArrowDown]",                   "command": "showNextParameterHint",
																								 "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "[ArrowDown]",                       "command": "showNextParameterHint",
																								 "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "ctrl+[KeyP]",                       "command": "showPrevParameterHint",
																								 "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "alt+[ArrowUp]",                     "command": "showPrevParameterHint",
																								 "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "[ArrowUp]",                         "command": "showPrevParameterHint",
																								 "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "shift+[Tab]",                       "command": "acceptAlternativeSelectedSuggestion",
																								 "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "shift+[Enter]",                     "command": "acceptAlternativeSelectedSuggestion",
																								 "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "[Tab]",                             "command": "acceptSelectedSuggestion",
																								 "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "[Enter]",                           "command": "acceptSelectedSuggestion",
																								 "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },
{ "key": "shift+[Escape]",                    "command": "hideSuggestWidget",
																								 "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "[Escape]",                          "command": "hideSuggestWidget",
																								 "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "[Tab]",                             "command": "insertBestCompletion",
																								 "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "[Tab]",                             "command": "insertNextSuggestion",
																								 "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "shift+[Tab]",                       "command": "insertPrevSuggestion",
																								 "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "cmd+[PageDown]",                    "command": "selectNextPageSuggestion",
																								 "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "[PageDown]",                        "command": "selectNextPageSuggestion",
																								 "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+[KeyN]",                       "command": "selectNextSuggestion",
																								 "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "cmd+[ArrowDown]",                   "command": "selectNextSuggestion",
																								 "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "[ArrowDown]",                       "command": "selectNextSuggestion",
																								 "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "cmd+[PageUp]",                      "command": "selectPrevPageSuggestion",
																								 "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "[PageUp]",                          "command": "selectPrevPageSuggestion",
																								 "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+[KeyP]",                       "command": "selectPrevSuggestion",
																								 "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "cmd+[ArrowUp]",                     "command": "selectPrevSuggestion",
																								 "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "[ArrowUp]",                         "command": "selectPrevSuggestion",
																								 "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "cmd+[KeyI]",                        "command": "toggleSuggestionDetails",
																								 "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+[Space]",                      "command": "toggleSuggestionDetails",
																								 "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+alt+[Space]",                  "command": "toggleSuggestionFocus",
																								 "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "[Enter]",                           "command": "acceptRenameInput",
																								 "when": "editorFocus && renameInputVisible" },
{ "key": "shift+[Enter]",                     "command": "acceptRenameInputWithPreview",
																								 "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible" },
{ "key": "shift+[Escape]",                    "command": "cancelLinkedEditingInput",
																								 "when": "LinkedEditingInputVisible && editorTextFocus" },
{ "key": "[Escape]",                          "command": "cancelLinkedEditingInput",
																								 "when": "LinkedEditingInputVisible && editorTextFocus" },
{ "key": "shift+[Escape]",                    "command": "cancelRenameInput",
																								 "when": "editorFocus && renameInputVisible" },
{ "key": "[Escape]",                          "command": "cancelRenameInput",
																								 "when": "editorFocus && renameInputVisible" },
{ "key": "shift+cmd+[KeyL]",                  "command": "addCursorsAtSearchResults",
																								 "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "shift+cmd+[Semicolon]",             "command": "breadcrumbs.focus",
																								 "when": "breadcrumbsPossible" },
{ "key": "shift+cmd+[Period]",                "command": "breadcrumbs.focusAndSelect",
																								 "when": "breadcrumbsPossible" },
{ "key": "alt+[ArrowRight]",                  "command": "breadcrumbs.focusNext",
																								 "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "[ArrowRight]",                      "command": "breadcrumbs.focusNext",
																								 "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "alt+[ArrowLeft]",                   "command": "breadcrumbs.focusPrevious",
																								 "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "[ArrowLeft]",                       "command": "breadcrumbs.focusPrevious",
																								 "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "cmd+[Enter]",                       "command": "breadcrumbs.revealFocused",
																								 "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "[Space]",                           "command": "breadcrumbs.revealFocused",
																								 "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "cmd+[Enter]",                       "command": "breadcrumbs.revealFocusedFromTreeAside",
																								 "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
{ "key": "[ArrowDown]",                       "command": "breadcrumbs.selectFocused",
																								 "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "[Enter]",                           "command": "breadcrumbs.selectFocused",
																								 "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "shift+cmd+[Period]",                "command": "breadcrumbs.toggleToOn",
																								 "when": "!config.breadcrumbs.enabled" },
{ "key": "shift+[Escape]",                    "command": "closeAccessibilityHelp",
																								 "when": "accessibilityHelpWidgetVisible && editorFocus" },
{ "key": "[Escape]",                          "command": "closeAccessibilityHelp",
																								 "when": "accessibilityHelpWidgetVisible && editorFocus" },
{ "key": "[Escape]",                          "command": "closeReplaceInFilesWidget",
																								 "when": "replaceInputBoxFocus && searchViewletVisible" },
{ "key": "alt+cmd+[KeyC]",                    "command": "copyFilePath",
																								 "when": "!editorFocus" },
{ "key": "shift+alt+cmd+[KeyC]",              "command": "copyRelativeFilePath",
																								 "when": "!editorFocus" },
{ "key": "alt+[Enter]",                       "command": "debug.openBreakpointToSide",
																								 "when": "breakpointsFocused" },
{ "key": "cmd+[Enter]",                       "command": "debug.openBreakpointToSide",
																								 "when": "breakpointsFocused" },
{ "key": "cmd+[F5]",                          "command": "debug.openView",
																								 "when": "!debuggersAvailable" },
{ "key": "[F5]",                              "command": "debug.openView",
																								 "when": "!debuggersAvailable" },
{ "key": "cmd+[Backspace]",                   "command": "debug.removeBreakpoint",
																								 "when": "breakpointsFocused && !breakpointInputFocused" },
{ "key": "cmd+[Backspace]",                   "command": "debug.removeWatchExpression",
																								 "when": "watchExpressionsFocused && !expressionSelected" },
{ "key": "alt+[Minus]",                       "command": "decreaseSearchEditorContextLines",
																								 "when": "inSearchEditor" },
{ "key": "[Tab]",                             "command": "editor.action.inlineSuggest.commit",
																								 "when": "inlineSuggestionVisible && !editorTabMovesFocus && !inlineSuggestionHasIndentation" },
{ "key": "shift+[F9]",                        "command": "editor.debug.action.toggleInlineBreakpoint",
																								 "when": "editorTextFocus" },
{ "key": "shift+[Enter]",                     "command": "editor.refocusCallHierarchy",
																								 "when": "callHierarchyVisible" },
{ "key": "shift+[Enter]",                     "command": "editor.refocusTypeHierarchy",
																								 "when": "typeHierarchyVisible" },
{ "key": "shift+alt+[KeyH]",                  "command": "editor.showCallHierarchy",
																								 "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor" },
{ "key": "shift+alt+[KeyH]",                  "command": "editor.showIncomingCalls",
																								 "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'" },
{ "key": "shift+alt+[KeyH]",                  "command": "editor.showOutgoingCalls",
																								 "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'" },
{ "key": "shift+alt+[KeyH]",                  "command": "editor.showSubtypes",
																								 "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'" },
{ "key": "shift+alt+[KeyH]",                  "command": "editor.showSupertypes",
																								 "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'" },
{ "key": "ctrl+[Enter]",                      "command": "explorer.openToSide",
																								 "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus" },
{ "key": "shift+alt+[KeyF]",                  "command": "filesExplorer.findInFolder",
																								 "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus" },
{ "key": "alt+[ArrowDown]",                   "command": "history.showNext",
																								 "when": "historyNavigationForwardsEnabled && historyNavigationWidget && !suggestWidgetVisible" },
{ "key": "[ArrowDown]",                       "command": "history.showNext",
																								 "when": "historyNavigationForwardsEnabled && historyNavigationWidget && !suggestWidgetVisible" },
{ "key": "alt+[ArrowUp]",                     "command": "history.showPrevious",
																								 "when": "historyNavigationBackwardsEnabled && historyNavigationWidget && !suggestWidgetVisible" },
{ "key": "[ArrowUp]",                         "command": "history.showPrevious",
																								 "when": "historyNavigationBackwardsEnabled && historyNavigationWidget && !suggestWidgetVisible" },
{ "key": "alt+[Equal]",                       "command": "increaseSearchEditorContextLines",
																								 "when": "inSearchEditor" },
{ "key": "[ArrowDown]",                       "command": "interactive.history.next",
																								 "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'" },
{ "key": "[ArrowUp]",                         "command": "interactive.history.previous",
																								 "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'" },
{ "key": "cmd+[KeyK] cmd+[KeyA]",             "command": "keybindings.editor.addKeybinding",
																								 "when": "inKeybindings && keybindingFocus" },
{ "key": "[Escape]",                          "command": "keybindings.editor.clearSearchResults",
																								 "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "cmd+[KeyC]",                        "command": "keybindings.editor.copyKeybindingEntry",
																								 "when": "inKeybindings && keybindingFocus" },
{ "key": "[Enter]",                           "command": "keybindings.editor.defineKeybinding",
																								 "when": "inKeybindings && keybindingFocus" },
{ "key": "cmd+[KeyK] cmd+[KeyE]",             "command": "keybindings.editor.defineWhenExpression",
																								 "when": "inKeybindings && keybindingFocus" },
{ "key": "cmd+[ArrowDown]",                   "command": "keybindings.editor.focusKeybindings",
																								 "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "alt+cmd+[KeyK]",                    "command": "keybindings.editor.recordSearchKeys",
																								 "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "cmd+[Backspace]",                   "command": "keybindings.editor.removeKeybinding",
																								 "when": "inKeybindings && keybindingFocus && !inputFocus" },
{ "key": "cmd+[KeyF]",                        "command": "keybindings.editor.searchKeybindings",
																								 "when": "inKeybindings" },
{ "key": "alt+cmd+[KeyP]",                    "command": "keybindings.editor.toggleSortByPrecedence",
																								 "when": "inKeybindings" },
{ "key": "[Escape]",                          "command": "list.clear",
																								 "when": "listFocus && listHasSelectionOrFocus && !inputFocus" },
{ "key": "cmd+[ArrowUp]",                     "command": "list.collapse",
																								 "when": "listFocus && !inputFocus" },
{ "key": "[ArrowLeft]",                       "command": "list.collapse",
																								 "when": "listFocus && !inputFocus" },
{ "key": "shift+cmd+[ArrowUp]",               "command": "list.collapseAll",
																								 "when": "listFocus && !inputFocus" },
{ "key": "cmd+[ArrowLeft]",                   "command": "list.collapseAll",
																								 "when": "listFocus && !inputFocus" },
{ "key": "[ArrowRight]",                      "command": "list.expand",
																								 "when": "listFocus && !inputFocus" },
{ "key": "shift+[ArrowDown]",                 "command": "list.expandSelectionDown",
																								 "when": "listFocus && listSupportsMultiselect && !inputFocus" },
{ "key": "shift+[ArrowUp]",                   "command": "list.expandSelectionUp",
																								 "when": "listFocus && listSupportsMultiselect && !inputFocus" },
{ "key": "ctrl+[KeyN]",                       "command": "list.focusDown",
																								 "when": "listFocus && !inputFocus" },
{ "key": "[ArrowDown]",                       "command": "list.focusDown",
																								 "when": "listFocus && !inputFocus" },
{ "key": "[Home]",                            "command": "list.focusFirst",
																								 "when": "listFocus && !inputFocus" },
{ "key": "[End]",                             "command": "list.focusLast",
																								 "when": "listFocus && !inputFocus" },
{ "key": "[PageDown]",                        "command": "list.focusPageDown",
																								 "when": "listFocus && !inputFocus" },
{ "key": "[PageUp]",                          "command": "list.focusPageUp",
																								 "when": "listFocus && !inputFocus" },
{ "key": "ctrl+[KeyP]",                       "command": "list.focusUp",
																								 "when": "listFocus && !inputFocus" },
{ "key": "[ArrowUp]",                         "command": "list.focusUp",
																								 "when": "listFocus && !inputFocus" },
{ "key": "cmd+[ArrowDown]",                   "command": "list.scrollDown",
																								 "when": "listFocus && !inputFocus" },
{ "key": "cmd+[ArrowUp]",                     "command": "list.scrollUp",
																								 "when": "listFocus && !inputFocus" },
{ "key": "cmd+[ArrowDown]",                   "command": "list.select",
																								 "when": "listFocus && !inputFocus" },
{ "key": "[Enter]",                           "command": "list.select",
																								 "when": "listFocus && !inputFocus" },
{ "key": "cmd+[KeyA]",                        "command": "list.selectAll",
																								 "when": "listFocus && listSupportsMultiselect && !inputFocus" },
{ "key": "[Space]",                           "command": "list.toggleExpand",
																								 "when": "listFocus && !inputFocus" },
{ "key": "shift+cmd+[Enter]",                 "command": "list.toggleSelection",
																								 "when": "listFocus && !inputFocus" },
{ "key": "[KeyY]",                            "command": "notebook.cell.changeToCode",
																								 "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'" },
{ "key": "[KeyM]",                            "command": "notebook.cell.changeToMarkdown",
																								 "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'" },
{ "key": "alt+[Delete]",                      "command": "notebook.cell.clearOutputs",
																								 "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "cmd+[KeyK] cmd+[KeyC]",             "command": "notebook.cell.collapseCellInput",
																								 "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed" },
{ "key": "cmd+[KeyK] [KeyT]",                 "command": "notebook.cell.collapseCellOutput",
																								 "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed" },
{ "key": "shift+alt+[ArrowDown]",             "command": "notebook.cell.copyDown",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "shift+alt+[ArrowUp]",               "command": "notebook.cell.copyUp",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+[Backspace]",                   "command": "notebook.cell.delete",
																								 "when": "notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "[Enter]",                           "command": "notebook.cell.edit",
																								 "when": "notebookCellListFocused && notebookEditable && !inputFocus" },
{ "key": "cmd+[KeyK] cmd+[KeyC]",             "command": "notebook.cell.expandCellInput",
																								 "when": "notebookCellInputIsCollapsed && notebookCellListFocused" },
{ "key": "cmd+[KeyK] [KeyT]",                 "command": "notebook.cell.expandCellOutput",
																								 "when": "notebookCellListFocused && notebookCellOutputIsCollapsed" },
{ "key": "ctrl+cmd+[ArrowDown]",              "command": "notebook.cell.focusInOutput",
																								 "when": "notebookCellHasOutputs && notebookEditorFocused" },
{ "key": "ctrl+cmd+[ArrowUp]",                "command": "notebook.cell.focusOutOutput",
																								 "when": "notebookEditorFocused" },
{ "key": "shift+cmd+[Enter]",                 "command": "notebook.cell.insertCodeCellAbove",
																								 "when": "notebookCellListFocused && !inputFocus" },
{ "key": "cmd+[Enter]",                       "command": "notebook.cell.insertCodeCellBelow",
																								 "when": "notebookCellListFocused && !inputFocus" },
{ "key": "ctrl+shift+alt+[KeyJ]",             "command": "notebook.cell.joinAbove",
																								 "when": "notebookEditorFocused" },
{ "key": "ctrl+alt+[KeyJ]",                   "command": "notebook.cell.joinBelow",
																								 "when": "notebookEditorFocused" },
{ "key": "alt+[ArrowDown]",                   "command": "notebook.cell.moveDown",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+[ArrowUp]",                     "command": "notebook.cell.moveUp",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+[KeyK] shift+cmd+[Backslash]",  "command": "notebook.cell.split",
																								 "when": "notebookCellEditable && notebookEditable && notebookEditorFocused" },
{ "key": "ctrl+[KeyL]",                       "command": "notebook.centerActiveCell",
																								 "when": "notebookEditorFocused" },
{ "key": "cmd+[KeyF]",                        "command": "notebook.find",
																								 "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "cmd+[ArrowDown]",                   "command": "notebook.focusBottom",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "ctrl+cmd+[ArrowDown]",              "command": "notebook.focusNextEditor",
																								 "when": "notebookEditorFocused && notebookOutputFocused" },
{ "key": "cmd+[ArrowUp]",                     "command": "notebook.focusTop",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "[ArrowLeft]",                       "command": "notebook.fold",
																								 "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "alt+cmd+[BracketLeft]",             "command": "notebook.fold",
																								 "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "shift+alt+[KeyF]",                  "command": "notebook.format",
																								 "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "[Escape]",                          "command": "notebook.hideFind",
																								 "when": "notebookEditorFocused && notebookFindWidgetFocused" },
{ "key": "[ArrowRight]",                      "command": "notebook.unfold",
																								 "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "alt+cmd+[BracketRight]",            "command": "notebook.unfold",
																								 "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "cmd+[Backspace]",                   "command": "notification.clear",
																								 "when": "notificationFocus" },
{ "key": "[ArrowLeft]",                       "command": "notification.collapse",
																								 "when": "notificationFocus" },
{ "key": "[ArrowRight]",                      "command": "notification.expand",
																								 "when": "notificationFocus" },
{ "key": "[Enter]",                           "command": "notification.toggle",
																								 "when": "notificationFocus" },
{ "key": "[Space]",                           "command": "notification.toggle",
																								 "when": "notificationFocus" },
{ "key": "[Home]",                            "command": "notifications.focusFirstToast",
																								 "when": "notificationFocus && notificationToastsVisible" },
{ "key": "[PageUp]",                          "command": "notifications.focusFirstToast",
																								 "when": "notificationFocus && notificationToastsVisible" },
{ "key": "[End]",                             "command": "notifications.focusLastToast",
																								 "when": "notificationFocus && notificationToastsVisible" },
{ "key": "[PageDown]",                        "command": "notifications.focusLastToast",
																								 "when": "notificationFocus && notificationToastsVisible" },
{ "key": "[ArrowDown]",                       "command": "notifications.focusNextToast",
																								 "when": "notificationFocus && notificationToastsVisible" },
{ "key": "[ArrowUp]",                         "command": "notifications.focusPreviousToast",
																								 "when": "notificationFocus && notificationToastsVisible" },
{ "key": "cmd+[KeyC]",                        "command": "problems.action.copy",
																								 "when": "problemFocus" },
{ "key": "cmd+[KeyF]",                        "command": "problems.action.focusFilter",
																								 "when": "focusedView == 'workbench.panel.markers.view'" },
{ "key": "cmd+[ArrowDown]",                   "command": "problems.action.focusProblemsFromFilter",
																								 "when": "problemsFilterFocus" },
{ "key": "cmd+[ArrowDown]",                   "command": "problems.action.open",
																								 "when": "problemFocus" },
{ "key": "[Enter]",                           "command": "problems.action.open",
																								 "when": "problemFocus" },
{ "key": "ctrl+[Enter]",                      "command": "problems.action.openToSide",
																								 "when": "problemFocus" },
{ "key": "cmd+[Period]",                      "command": "problems.action.showQuickFixes",
																								 "when": "problemFocus" },
{ "key": "[Space]",                           "command": "refactorPreview.toggleCheckedState",
																								 "when": "listFocus && refactorPreview.enabled && !inputFocus" },
{ "key": "alt+cmd+[KeyR]",                    "command": "revealFileInOS",
																								 "when": "!editorFocus" },
{ "key": "cmd+[ArrowDown]",                   "command": "revealReference",
																								 "when": "listFocus && referenceSearchVisible && !inputFocus" },
{ "key": "[Enter]",                           "command": "revealReference",
																								 "when": "listFocus && referenceSearchVisible && !inputFocus" },
{ "key": "alt+cmd+[KeyS]",                    "command": "saveAll" },
{ "key": "cmd+[Enter]",                       "command": "scm.acceptInput",
																								 "when": "scmRepository" },
{ "key": "alt+[ArrowDown]",                   "command": "scm.forceViewNextCommit",
																								 "when": "scmRepository" },
{ "key": "alt+[ArrowUp]",                     "command": "scm.forceViewPreviousCommit",
																								 "when": "scmRepository" },
{ "key": "[ArrowDown]",                       "command": "scm.viewNextCommit",
																								 "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible" },
{ "key": "[ArrowUp]",                         "command": "scm.viewPreviousCommit",
																								 "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible" },
{ "key": "[Escape]",                          "command": "search.action.cancel",
																								 "when": "listFocus && searchViewletVisible && !inputFocus && searchState != '0'" },
{ "key": "cmd+[KeyC]",                        "command": "search.action.copyMatch",
																								 "when": "fileMatchOrMatchFocus" },
{ "key": "alt+cmd+[KeyC]",                    "command": "search.action.copyPath",
																								 "when": "fileMatchOrFolderMatchWithResourceFocus" },
{ "key": "[F4]",                              "command": "search.action.focusNextSearchResult",
																								 "when": "hasSearchResult || inSearchEditor" },
{ "key": "shift+[F4]",                        "command": "search.action.focusPreviousSearchResult",
																								 "when": "hasSearchResult || inSearchEditor" },
{ "key": "cmd+[ArrowUp]",                     "command": "search.action.focusSearchFromResults",
																								 "when": "firstMatchFocus && searchViewletVisible" },
{ "key": "cmd+[Enter]",                       "command": "search.action.openInEditor",
																								 "when": "hasSearchResult && searchViewletFocus" },
{ "key": "cmd+[ArrowDown]",                   "command": "search.action.openResult",
																								 "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "[Enter]",                           "command": "search.action.openResult",
																								 "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "ctrl+[Enter]",                      "command": "search.action.openResultToSide",
																								 "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "cmd+[Backspace]",                   "command": "search.action.remove",
																								 "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "shift+cmd+[Digit1]",                "command": "search.action.replace",
																								 "when": "matchFocus && replaceActive && searchViewletVisible" },
{ "key": "alt+cmd+[Enter]",                   "command": "search.action.replaceAll",
																								 "when": "replaceActive && searchViewletVisible && !findWidgetVisible" },
{ "key": "shift+cmd+[Enter]",                 "command": "search.action.replaceAllInFile",
																								 "when": "fileMatchFocus && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+[Digit1]",                "command": "search.action.replaceAllInFile",
																								 "when": "fileMatchFocus && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+[Enter]",                 "command": "search.action.replaceAllInFolder",
																								 "when": "folderMatchFocus && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+[Digit1]",                "command": "search.action.replaceAllInFolder",
																								 "when": "folderMatchFocus && replaceActive && searchViewletVisible" },
{ "key": "cmd+[ArrowDown]",                   "command": "search.focus.nextInputBox",
																								 "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible" },
{ "key": "cmd+[ArrowUp]",                     "command": "search.focus.previousInputBox",
																								 "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus" },
{ "key": "shift+cmd+[KeyL]",                  "command": "selectAllSearchEditorMatches",
																								 "when": "inSearchEditor" },
{ "key": "[Escape]",                          "command": "settings.action.focusLevelUp",
																								 "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch" },
{ "key": "[Enter]",                           "command": "settings.action.focusSettingControl",
																								 "when": "settingRowFocus" },
{ "key": "[ArrowDown]",                       "command": "settings.action.focusSettingsFromSearch",
																								 "when": "inSettingsSearch && !suggestWidgetVisible" },
{ "key": "[Enter]",                           "command": "settings.action.focusSettingsList",
																								 "when": "inSettingsEditor && settingsTocRowFocus" },
{ "key": "[ArrowLeft]",                       "command": "settings.action.focusTOC",
																								 "when": "inSettingsEditor && settingRowFocus" },
{ "key": "shift+[F9]",                        "command": "settings.action.showContextMenu",
																								 "when": "inSettingsEditor" },
{ "key": "cmd+[Semicolon] cmd+[KeyX]",        "command": "testing.cancelRun" },
{ "key": "cmd+[Semicolon] cmd+[KeyA]",        "command": "testing.debugAll" },
{ "key": "cmd+[Semicolon] cmd+[KeyC]",        "command": "testing.debugAtCursor",
																								 "when": "editorTextFocus" },
{ "key": "cmd+[Semicolon] cmd+[KeyF]",        "command": "testing.debugCurrentFile",
																								 "when": "editorTextFocus" },
{ "key": "cmd+[Semicolon] cmd+[KeyE]",        "command": "testing.debugFailTests" },
{ "key": "cmd+[Semicolon] cmd+[KeyL]",        "command": "testing.debugLastRun" },
{ "key": "cmd+[Semicolon] [KeyM]",            "command": "testing.openOutputPeek" },
{ "key": "cmd+[Semicolon] [KeyE]",            "command": "testing.reRunFailTests" },
{ "key": "cmd+[Semicolon] [KeyL]",            "command": "testing.reRunLastRun" },
{ "key": "cmd+[Semicolon] [KeyA]",            "command": "testing.runAll" },
{ "key": "cmd+[Semicolon] [KeyC]",            "command": "testing.runAtCursor",
																								 "when": "editorTextFocus" },
{ "key": "cmd+[Semicolon] [KeyF]",            "command": "testing.runCurrentFile",
																								 "when": "editorTextFocus" },
{ "key": "cmd+[Semicolon] cmd+[KeyO]",        "command": "testing.showMostRecentOutput",
																								 "when": "testing.hasAnyResults" },
{ "key": "cmd+[Semicolon] cmd+[KeyI]",        "command": "testing.toggleInlineTestOutput" },
{ "key": "cmd+[KeyH]",                        "command": "testing.toggleTestingPeekHistory",
																								 "when": "testing.isPeekVisible" },
{ "key": "alt+cmd+[KeyC]",                    "command": "toggleSearchCaseSensitive",
																								 "when": "searchViewletFocus && !fileMatchOrFolderMatchFocus" },
{ "key": "alt+cmd+[KeyC]",                    "command": "toggleSearchEditorCaseSensitive",
																								 "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+[KeyL]",                    "command": "toggleSearchEditorContextLines",
																								 "when": "inSearchEditor" },
{ "key": "alt+cmd+[KeyR]",                    "command": "toggleSearchEditorRegex",
																								 "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+[KeyW]",                    "command": "toggleSearchEditorWholeWord",
																								 "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+[KeyP]",                    "command": "toggleSearchPreserveCase",
																								 "when": "searchViewletFocus" },
{ "key": "alt+cmd+[KeyR]",                    "command": "toggleSearchRegex",
																								 "when": "searchViewletFocus" },
{ "key": "alt+cmd+[KeyW]",                    "command": "toggleSearchWholeWord",
																								 "when": "searchViewletFocus" },
{ "key": "ctrl+alt+cmd+[KeyN]",               "command": "welcome.showNewFileEntries" },
{ "key": "cmd+[KeyW]",                        "command": "workbench.action.closeActiveEditor" },
{ "key": "cmd+[KeyK] cmd+[KeyW]",             "command": "workbench.action.closeAllEditors" },
{ "key": "cmd+[KeyK] shift+cmd+[KeyW]",       "command": "workbench.action.closeAllGroups" },
{ "key": "cmd+[KeyK] [KeyW]",                 "command": "workbench.action.closeEditorsInGroup" },
{ "key": "cmd+[KeyK] [KeyF]",                 "command": "workbench.action.closeFolder",
																								 "when": "emptyWorkspaceSupport && workbenchState != 'empty'" },
{ "key": "cmd+[KeyW]",                        "command": "workbench.action.closeGroup",
																								 "when": "activeEditorGroupEmpty && multipleEditorGroups" },
{ "key": "alt+cmd+[KeyT]",                    "command": "workbench.action.closeOtherEditors" },
{ "key": "shift+[Escape]",                    "command": "workbench.action.closeQuickOpen",
																								 "when": "inQuickOpen" },
{ "key": "[Escape]",                          "command": "workbench.action.closeQuickOpen",
																								 "when": "inQuickOpen" },
{ "key": "cmd+[KeyK] [KeyU]",                 "command": "workbench.action.closeUnmodifiedEditors" },
{ "key": "shift+cmd+[KeyW]",                  "command": "workbench.action.closeWindow" },
{ "key": "cmd+[KeyW]",                        "command": "workbench.action.closeWindow",
																								 "when": "!editorIsOpen && !multipleEditorGroups" },
{ "key": "alt+[F5]",                          "command": "workbench.action.compareEditor.nextChange",
																								 "when": "textCompareEditorVisible" },
{ "key": "shift+alt+[F5]",                    "command": "workbench.action.compareEditor.previousChange",
																								 "when": "textCompareEditorVisible" },
{ "key": "shift+[F5]",                        "command": "workbench.action.debug.disconnect",
																								 "when": "focusedSessionIsAttach && inDebugMode" },
{ "key": "shift+cmd+[F5]",                    "command": "workbench.action.debug.restart",
																								 "when": "inDebugMode" },
{ "key": "ctrl+[F5]",                         "command": "workbench.action.debug.run",
																								 "when": "debuggersAvailable && debugState != 'initializing'" },
{ "key": "[F5]",                              "command": "workbench.action.debug.start",
																								 "when": "debuggersAvailable && debugState == 'inactive'" },
{ "key": "shift+[F11]",                       "command": "workbench.action.debug.stepOut",
																								 "when": "debugState == 'stopped'" },
{ "key": "[F10]",                             "command": "workbench.action.debug.stepOver",
																								 "when": "debugState == 'stopped'" },
{ "key": "shift+[F5]",                        "command": "workbench.action.debug.stop",
																								 "when": "inDebugMode && !focusedSessionIsAttach" },
{ "key": "cmd+[KeyK] [KeyM]",                 "command": "workbench.action.editor.changeLanguageMode",
																								 "when": "!notebookEditorFocused" },
{ "key": "cmd+[KeyK] [KeyP]",                 "command": "workbench.action.files.copyPathOfActiveFile" },
{ "key": "cmd+[KeyN]",                        "command": "workbench.action.files.newUntitledFile" },
{ "key": "cmd+[KeyO]",                        "command": "workbench.action.files.openFile",
																								 "when": "false" },
{ "key": "cmd+[KeyO]",                        "command": "workbench.action.files.openFileFolder",
																								 "when": "isMacNative && openFolderWorkspaceSupport" },
{ "key": "cmd+[KeyO]",                        "command": "workbench.action.files.openLocalFileFolder",
																								 "when": "remoteFileDialogVisible" },
{ "key": "cmd+[KeyK] [KeyR]",                 "command": "workbench.action.files.revealActiveFileInWindows" },
{ "key": "cmd+[KeyS]",                        "command": "workbench.action.files.save" },
{ "key": "shift+cmd+[KeyS]",                  "command": "workbench.action.files.saveAs" },
{ "key": "shift+cmd+[KeyS]",                  "command": "workbench.action.files.saveLocalFile",
																								 "when": "remoteFileDialogVisible" },
{ "key": "cmd+[KeyK] [KeyS]",                 "command": "workbench.action.files.saveWithoutFormatting" },
{ "key": "cmd+[KeyK] [KeyO]",                 "command": "workbench.action.files.showOpenedFileInNewWindow",
																								 "when": "emptyWorkspaceSupport" },
{ "key": "shift+cmd+[KeyF]",                  "command": "workbench.action.findInFiles" },
{ "key": "cmd+[KeyK] cmd+[ArrowUp]",          "command": "workbench.action.focusAboveGroup" },
{ "key": "cmd+[KeyK] cmd+[ArrowDown]",        "command": "workbench.action.focusBelowGroup" },
{ "key": "cmd+[Digit8]",                      "command": "workbench.action.focusEighthEditorGroup" },
{ "key": "cmd+[Digit5]",                      "command": "workbench.action.focusFifthEditorGroup" },
{ "key": "cmd+[Digit1]",                      "command": "workbench.action.focusFirstEditorGroup" },
{ "key": "cmd+[Digit4]",                      "command": "workbench.action.focusFourthEditorGroup" },
{ "key": "cmd+[KeyK] cmd+[ArrowLeft]",        "command": "workbench.action.focusLeftGroup" },
{ "key": "[F6]",                              "command": "workbench.action.focusNextPart" },
{ "key": "shift+[F6]",                        "command": "workbench.action.focusPreviousPart" },
{ "key": "cmd+[KeyK] cmd+[ArrowRight]",       "command": "workbench.action.focusRightGroup" },
{ "key": "cmd+[Digit2]",                      "command": "workbench.action.focusSecondEditorGroup" },
{ "key": "cmd+[Digit7]",                      "command": "workbench.action.focusSeventhEditorGroup" },
{ "key": "cmd+[Digit0]",                      "command": "workbench.action.focusSideBar" },
{ "key": "cmd+[Digit6]",                      "command": "workbench.action.focusSixthEditorGroup" },
{ "key": "cmd+[Digit3]",                      "command": "workbench.action.focusThirdEditorGroup" },
{ "key": "ctrl+[KeyG]",                       "command": "workbench.action.gotoLine" },
{ "key": "shift+cmd+[KeyO]",                  "command": "workbench.action.gotoSymbol" },
{ "key": "[Escape]",                          "command": "workbench.action.hideInterfaceOverview",
																								 "when": "interfaceOverviewVisible" },
{ "key": "[ArrowDown]",                       "command": "workbench.action.interactivePlayground.arrowDown",
																								 "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "[ArrowUp]",                         "command": "workbench.action.interactivePlayground.arrowUp",
																								 "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "[PageDown]",                        "command": "workbench.action.interactivePlayground.pageDown",
																								 "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "[PageUp]",                          "command": "workbench.action.interactivePlayground.pageUp",
																								 "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "cmd+[KeyK] shift+cmd+[Backslash]",  "command": "workbench.action.joinEditorInGroup",
																								 "when": "sideBySideEditorActive" },
{ "key": "cmd+[KeyK] [Enter]",                "command": "workbench.action.keepEditor" },
{ "key": "cmd+[KeyK] cmd+[KeyR]",             "command": "workbench.action.keybindingsReference" },
{ "key": "cmd+[Digit9]",                      "command": "workbench.action.lastEditorInGroup" },
{ "key": "ctrl+[Digit0]",                     "command": "workbench.action.lastEditorInGroup" },
{ "key": "cmd+[KeyK] [ArrowDown]",            "command": "workbench.action.moveActiveEditorGroupDown" },
{ "key": "cmd+[KeyK] [ArrowLeft]",            "command": "workbench.action.moveActiveEditorGroupLeft" },
{ "key": "cmd+[KeyK] [ArrowRight]",           "command": "workbench.action.moveActiveEditorGroupRight" },
{ "key": "cmd+[KeyK] [ArrowUp]",              "command": "workbench.action.moveActiveEditorGroupUp" },
{ "key": "cmd+[KeyK] shift+cmd+[ArrowLeft]",  "command": "workbench.action.moveEditorLeftInGroup" },
{ "key": "cmd+[KeyK] shift+cmd+[ArrowRight]", "command": "workbench.action.moveEditorRightInGroup" },
{ "key": "ctrl+cmd+[Digit1]",                 "command": "workbench.action.moveEditorToFirstGroup" },
{ "key": "ctrl+cmd+[Digit9]",                 "command": "workbench.action.moveEditorToLastGroup" },
{ "key": "ctrl+cmd+[ArrowRight]",             "command": "workbench.action.moveEditorToNextGroup" },
{ "key": "ctrl+cmd+[ArrowLeft]",              "command": "workbench.action.moveEditorToPreviousGroup" },
{ "key": "ctrl+[Minus]",                      "command": "workbench.action.navigateBack" },
{ "key": "ctrl+shift+[Minus]",                "command": "workbench.action.navigateForward" },
{ "key": "cmd+[KeyK] cmd+[KeyQ]",             "command": "workbench.action.navigateToLastEditLocation" },
{ "key": "shift+cmd+[KeyN]",                  "command": "workbench.action.newWindow" },
{ "key": "shift+cmd+[BracketRight]",          "command": "workbench.action.nextEditor" },
{ "key": "alt+cmd+[ArrowRight]",              "command": "workbench.action.nextEditor" },
{ "key": "cmd+[KeyK] alt+cmd+[ArrowRight]",   "command": "workbench.action.nextEditorInGroup" },
{ "key": "ctrl+[Digit1]",                     "command": "workbench.action.openEditorAtIndex1" },
{ "key": "ctrl+[Digit2]",                     "command": "workbench.action.openEditorAtIndex2" },
{ "key": "ctrl+[Digit3]",                     "command": "workbench.action.openEditorAtIndex3" },
{ "key": "ctrl+[Digit4]",                     "command": "workbench.action.openEditorAtIndex4" },
{ "key": "ctrl+[Digit5]",                     "command": "workbench.action.openEditorAtIndex5" },
{ "key": "ctrl+[Digit6]",                     "command": "workbench.action.openEditorAtIndex6" },
{ "key": "ctrl+[Digit7]",                     "command": "workbench.action.openEditorAtIndex7" },
{ "key": "ctrl+[Digit8]",                     "command": "workbench.action.openEditorAtIndex8" },
{ "key": "ctrl+[Digit9]",                     "command": "workbench.action.openEditorAtIndex9" },
{ "key": "cmd+[KeyK] cmd+[KeyS]",             "command": "workbench.action.openGlobalKeybindings" },
{ "key": "ctrl+[KeyR]",                       "command": "workbench.action.openRecent" },
{ "key": "cmd+[Comma]",                       "command": "workbench.action.openSettings" },
{ "key": "shift+cmd+[KeyU]",                  "command": "workbench.action.output.toggleOutput",
																								 "when": "workbench.panel.output.active" },
{ "key": "cmd+[KeyK] shift+[Enter]",          "command": "workbench.action.pinEditor",
																								 "when": "!activeEditorIsPinned" },
{ "key": "shift+cmd+[BracketLeft]",           "command": "workbench.action.previousEditor" },
{ "key": "alt+cmd+[ArrowLeft]",               "command": "workbench.action.previousEditor" },
{ "key": "cmd+[KeyK] alt+cmd+[ArrowLeft]",    "command": "workbench.action.previousEditorInGroup" },
{ "key": "cmd+[KeyP]",                        "command": "workbench.action.quickOpen" },
{ "key": "ctrl+shift+[Tab]",                  "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup" },
{ "key": "ctrl+[Tab]",                        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup" },
{ "key": "ctrl+[KeyQ]",                       "command": "workbench.action.quickOpenView" },
{ "key": "cmd+[KeyQ]",                        "command": "workbench.action.quit" },
{ "key": "shift+cmd+[KeyT]",                  "command": "workbench.action.reopenClosedEditor" },
{ "key": "shift+cmd+[KeyH]",                  "command": "workbench.action.replaceInFiles" },
{ "key": "shift+cmd+[KeyJ]",                  "command": "workbench.action.search.toggleQueryDetails",
																								 "when": "inSearchEditor || searchViewletFocus" },
{ "key": "cmd+[KeyK] cmd+[KeyT]",             "command": "workbench.action.selectTheme" },
{ "key": "alt+cmd+[Tab]",                     "command": "workbench.action.showAllEditors" },
{ "key": "cmd+[KeyT]",                        "command": "workbench.action.showAllSymbols" },
{ "key": "[F1]",                              "command": "workbench.action.showCommands" },
{ "key": "shift+cmd+[KeyP]",                  "command": "workbench.action.showCommands" },
{ "key": "cmd+[Backslash]",                   "command": "workbench.action.splitEditor" },
{ "key": "cmd+[KeyK] shift+cmd+[Backslash]",  "command": "workbench.action.splitEditorInGroup",
																								 "when": "activeEditorCanSplitInGroup" },
{ "key": "cmd+[KeyK] cmd+[Backslash]",        "command": "workbench.action.splitEditorOrthogonal" },
{ "key": "ctrl+[KeyW]",                       "command": "workbench.action.switchWindow" },
{ "key": "shift+cmd+[KeyB]",                  "command": "workbench.action.tasks.build" },
{ "key": "[Escape]",                          "command": "workbench.action.terminal.clearSelection",
																								 "when": "terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible" },
{ "key": "cmd+[KeyC]",                        "command": "workbench.action.terminal.copySelection",
																								 "when": "terminalFocus && terminalProcessSupported && terminalTextSelected" },
{ "key": "[F3]",                              "command": "workbench.action.terminal.findNext",
																								 "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "cmd+[KeyG]",                        "command": "workbench.action.terminal.findNext",
																								 "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "shift+[Enter]",                     "command": "workbench.action.terminal.findNext",
																								 "when": "terminalFindFocused && terminalProcessSupported" },
{ "key": "shift+[F3]",                        "command": "workbench.action.terminal.findPrevious",
																								 "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+[KeyG]",                  "command": "workbench.action.terminal.findPrevious",
																								 "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "[Enter]",                           "command": "workbench.action.terminal.findPrevious",
																								 "when": "terminalFindFocused && terminalProcessSupported" },
{ "key": "cmd+[KeyF]",                        "command": "workbench.action.terminal.focusFind",
																								 "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+[BracketRight]",          "command": "workbench.action.terminal.focusNext",
																								 "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
{ "key": "alt+cmd+[ArrowDown]",               "command": "workbench.action.terminal.focusNextPane",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+[ArrowRight]",              "command": "workbench.action.terminal.focusNextPane",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+[BracketLeft]",           "command": "workbench.action.terminal.focusPrevious",
																								 "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
{ "key": "alt+cmd+[ArrowUp]",                 "command": "workbench.action.terminal.focusPreviousPane",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+[ArrowLeft]",               "command": "workbench.action.terminal.focusPreviousPane",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+[Backslash]",             "command": "workbench.action.terminal.focusTabs",
																								 "when": "terminalFocus && terminalProcessSupported || terminalProcessSupported && terminalTabsFocus" },
{ "key": "shift+[Escape]",                    "command": "workbench.action.terminal.hideFind",
																								 "when": "terminalFindVisible && terminalFocus && terminalProcessSupported" },
{ "key": "[Escape]",                          "command": "workbench.action.terminal.hideFind",
																								 "when": "terminalFindVisible && terminalFocus && terminalProcessSupported" },
{ "key": "cmd+[KeyW]",                        "command": "workbench.action.terminal.killEditor",
																								 "when": "terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'" },
{ "key": "[Delete]",                          "command": "workbench.action.terminal.killInstance",
																								 "when": "terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+[Backspace]",                   "command": "workbench.action.terminal.killInstance",
																								 "when": "terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "[Escape]",                          "command": "workbench.action.terminal.navigationModeExit",
																								 "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported" },
{ "key": "cmd+[ArrowDown]",                   "command": "workbench.action.terminal.navigationModeFocusNext",
																								 "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
{ "key": "cmd+[ArrowUp]",                     "command": "workbench.action.terminal.navigationModeFocusPrevious",
																								 "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+shift+[Backquote]",            "command": "workbench.action.terminal.new",
																								 "when": "terminalProcessSupported" },
{ "key": "shift+cmd+[KeyC]",                  "command": "workbench.action.terminal.openNativeConsole",
																								 "when": "!terminalFocus" },
{ "key": "cmd+[KeyV]",                        "command": "workbench.action.terminal.paste",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "[Enter]",                           "command": "workbench.action.terminal.renameInstance",
																								 "when": "terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection" },
{ "key": "ctrl+cmd+[ArrowDown]",              "command": "workbench.action.terminal.resizePaneDown",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+[ArrowLeft]",              "command": "workbench.action.terminal.resizePaneLeft",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+[ArrowRight]",             "command": "workbench.action.terminal.resizePaneRight",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+[ArrowUp]",                "command": "workbench.action.terminal.resizePaneUp",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+[PageDown]",                "command": "workbench.action.terminal.scrollDown",
																								 "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "[PageDown]",                        "command": "workbench.action.terminal.scrollDownPage",
																								 "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+[End]",                         "command": "workbench.action.terminal.scrollToBottom",
																								 "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+[ArrowDown]",                   "command": "workbench.action.terminal.scrollToNextCommand",
																								 "when": "terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
{ "key": "cmd+[ArrowUp]",                     "command": "workbench.action.terminal.scrollToPreviousCommand",
																								 "when": "terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
{ "key": "cmd+[Home]",                        "command": "workbench.action.terminal.scrollToTop",
																								 "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "alt+cmd+[PageUp]",                  "command": "workbench.action.terminal.scrollUp",
																								 "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "[PageUp]",                          "command": "workbench.action.terminal.scrollUpPage",
																								 "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+[KeyA]",                        "command": "workbench.action.terminal.selectAll",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+[ArrowDown]",             "command": "workbench.action.terminal.selectToNextCommand",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+[ArrowUp]",               "command": "workbench.action.terminal.selectToPreviousCommand",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "alt+[Backspace]",                   "command": "workbench.action.terminal.sendSequence",
																								 "when": "terminalFocus",
																									"args": {"text":"\u0017"} },
{ "key": "alt+[Delete]",                      "command": "workbench.action.terminal.sendSequence",
																								 "when": "terminalFocus",
																									"args": {"text":"\u001bd"} },
{ "key": "cmd+[Backspace]",                   "command": "workbench.action.terminal.sendSequence",
																								 "when": "terminalFocus",
																									"args": {"text":"\u0015"} },
{ "key": "cmd+[ArrowLeft]",                   "command": "workbench.action.terminal.sendSequence",
																								 "when": "terminalFocus",
																									"args": {"text":"\u0001"} },
{ "key": "cmd+[ArrowRight]",                  "command": "workbench.action.terminal.sendSequence",
																								 "when": "terminalFocus",
																									"args": {"text":"\u0005"} },
{ "key": "cmd+[Period]",                      "command": "workbench.action.terminal.sendSequence",
																								 "when": "terminalFocus",
																									"args": {"text":"\u0003"} },
{ "key": "alt+[KeyZ]",                        "command": "workbench.action.terminal.sizeToContentWidth",
																								 "when": "terminalFocus && terminalIsOpen && terminalProcessSupported" },
{ "key": "ctrl+shift+[Digit5]",               "command": "workbench.action.terminal.split",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "cmd+[Backslash]",                   "command": "workbench.action.terminal.split",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+shift+[Digit5]",               "command": "workbench.action.terminal.splitInstance",
																								 "when": "terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+[Backslash]",                   "command": "workbench.action.terminal.splitInstance",
																								 "when": "terminalProcessSupported && terminalTabsFocus" },
{ "key": "alt+cmd+[KeyC]",                    "command": "workbench.action.terminal.toggleFindCaseSensitive",
																								 "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+[KeyR]",                    "command": "workbench.action.terminal.toggleFindRegex",
																								 "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+[KeyW]",                    "command": "workbench.action.terminal.toggleFindWholeWord",
																								 "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+[Backquote]",                  "command": "workbench.action.terminal.toggleTerminal",
																								 "when": "terminal.active" },
{ "key": "alt+cmd+[Digit0]",                  "command": "workbench.action.toggleEditorGroupLayout" },
{ "key": "ctrl+cmd+[KeyF]",                   "command": "workbench.action.toggleFullScreen",
																								 "when": "!isIOS" },
{ "key": "cmd+[KeyJ]",                        "command": "workbench.action.togglePanel" },
{ "key": "cmd+[KeyB]",                        "command": "workbench.action.toggleSidebarVisibility" },
{ "key": "ctrl+cmd+[KeyW]",                   "command": "workbench.action.toggleTabsVisibility" },
{ "key": "cmd+[KeyK] [KeyZ]",                 "command": "workbench.action.toggleZenMode" },
{ "key": "cmd+[KeyK] shift+[Enter]",          "command": "workbench.action.unpinEditor",
																								 "when": "activeEditorIsPinned" },
{ "key": "cmd+[NumpadAdd]",                   "command": "workbench.action.zoomIn" },
{ "key": "shift+cmd+[Equal]",                 "command": "workbench.action.zoomIn" },
{ "key": "cmd+[Equal]",                       "command": "workbench.action.zoomIn" },
{ "key": "cmd+[NumpadSubtract]",              "command": "workbench.action.zoomOut" },
{ "key": "shift+cmd+[Minus]",                 "command": "workbench.action.zoomOut" },
{ "key": "cmd+[Minus]",                       "command": "workbench.action.zoomOut" },
{ "key": "cmd+[Numpad0]",                     "command": "workbench.action.zoomReset" },
{ "key": "shift+cmd+[KeyM]",                  "command": "workbench.actions.view.problems",
																								 "when": "workbench.panel.markers.view.active" },
{ "key": "[Escape]",                          "command": "workbench.banner.focusBanner",
																								 "when": "bannerFocused" },
{ "key": "[ArrowDown]",                       "command": "workbench.banner.focusNextAction",
																								 "when": "bannerFocused" },
{ "key": "[ArrowRight]",                      "command": "workbench.banner.focusNextAction",
																								 "when": "bannerFocused" },
{ "key": "[ArrowUp]",                         "command": "workbench.banner.focusPreviousAction",
																								 "when": "bannerFocused" },
{ "key": "[ArrowLeft]",                       "command": "workbench.banner.focusPreviousAction",
																								 "when": "bannerFocused" },
{ "key": "shift+cmd+[KeyY]",                  "command": "workbench.debug.action.toggleRepl",
																								 "when": "workbench.panel.repl.view.active" },
{ "key": "cmd+[KeyK] [KeyC]",                 "command": "workbench.files.action.compareWithClipboard" },
{ "key": "cmd+[KeyK] [KeyD]",                 "command": "workbench.files.action.compareWithSaved" },
{ "key": "cmd+[KeyK] [KeyE]",                 "command": "workbench.files.action.focusOpenEditorsView",
																								 "when": "workbench.explorer.openEditorsView.active" },
{ "key": "[Escape]",                          "command": "workbench.statusBar.clearFocus",
																								 "when": "statusBarFocused" },
{ "key": "[Home]",                            "command": "workbench.statusBar.focusFirst",
																								 "when": "statusBarFocused" },
{ "key": "[End]",                             "command": "workbench.statusBar.focusLast",
																								 "when": "statusBarFocused" },
{ "key": "[ArrowDown]",                       "command": "workbench.statusBar.focusNext",
																								 "when": "statusBarFocused" },
{ "key": "[ArrowRight]",                      "command": "workbench.statusBar.focusNext",
																								 "when": "statusBarFocused" },
{ "key": "[ArrowUp]",                         "command": "workbench.statusBar.focusPrevious",
																								 "when": "statusBarFocused" },
{ "key": "[ArrowLeft]",                       "command": "workbench.statusBar.focusPrevious",
																								 "when": "statusBarFocused" },
{ "key": "shift+cmd+[KeyD]",                  "command": "workbench.view.debug",
																								 "when": "viewContainer.workbench.view.debug.enabled" },
{ "key": "shift+cmd+[KeyE]",                  "command": "workbench.view.explorer",
																								 "when": "viewContainer.workbench.view.explorer.enabled" },
{ "key": "shift+cmd+[KeyX]",                  "command": "workbench.view.extensions",
																								 "when": "viewContainer.workbench.view.extensions.enabled" },
{ "key": "ctrl+shift+[KeyG]",                 "command": "workbench.view.scm",
																								 "when": "workbench.scm.active" },
{ "key": "shift+cmd+[KeyF]",                  "command": "workbench.view.search",
																								 "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/" },
{ "key": "alt+[ArrowRight]",                  "command": "breadcrumbs.focusNextWithPicker",
																								 "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
{ "key": "alt+[ArrowLeft]",                   "command": "breadcrumbs.focusPreviousWithPicker",
																								 "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
{ "key": "[Escape]",                          "command": "breadcrumbs.selectEditor",
																								 "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "cmd+[KeyK] [ArrowDown]",            "command": "views.moveViewDown",
																								 "when": "focusedView != ''" },
{ "key": "cmd+[KeyK] [ArrowLeft]",            "command": "views.moveViewLeft",
																								 "when": "focusedView != ''" },
{ "key": "cmd+[KeyK] [ArrowRight]",           "command": "views.moveViewRight",
																								 "when": "focusedView != ''" },
{ "key": "cmd+[KeyK] [ArrowUp]",              "command": "views.moveViewUp",
																								 "when": "focusedView != ''" },
{ "key": "cmd+[KeyK]",                        "command": "workbench.action.terminal.clear",
																								 "when": "terminalFocus && terminalProcessSupported" },
{ "key": "[F6]",                              "command": "workbench.action.debug.pause",
																								 "when": "debugState == 'running'" },
{ "key": "[Enter]",                           "command": "debug.renameWatchExpression",
																								 "when": "watchExpressionsFocused" },
{ "key": "[Enter]",                           "command": "debug.setVariable",
																								 "when": "variablesFocused" },
{ "key": "[Space]",                           "command": "debug.toggleBreakpoint",
																								 "when": "breakpointsFocused && !inputFocus" },
{ "key": "alt+cmd+[Backspace]",               "command": "deleteFile",
																								 "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
{ "key": "cmd+[Backspace]",                   "command": "deleteFile",
																								 "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus" },
{ "key": "[Escape]",                          "command": "editor.closeCallHierarchy",
																								 "when": "callHierarchyVisible && !config.editor.stablePeek" },
{ "key": "[Escape]",                          "command": "editor.closeTypeHierarchy",
																								 "when": "typeHierarchyVisible && !config.editor.stablePeek" },
{ "key": "cmd+[ArrowDown]",                   "command": "explorer.openAndPassFocus",
																								 "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus" },
{ "key": "[Escape]",                          "command": "filesExplorer.cancelCut",
																								 "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus" },
{ "key": "cmd+[KeyC]",                        "command": "filesExplorer.copy",
																								 "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus" },
{ "key": "cmd+[KeyX]",                        "command": "filesExplorer.cut",
																								 "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
{ "key": "[Space]",                           "command": "filesExplorer.openFilePreserveFocus",
																								 "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus" },
{ "key": "cmd+[KeyV]",                        "command": "filesExplorer.paste",
																								 "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
{ "key": "[Home]",                            "command": "firstCompressedFolder",
																								 "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus" },
{ "key": "[End]",                             "command": "lastCompressedFolder",
																								 "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus" },
{ "key": "[Delete]",                          "command": "moveFileToTrash",
																								 "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
{ "key": "cmd+[Backspace]",                   "command": "moveFileToTrash",
																								 "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
{ "key": "[ArrowRight]",                      "command": "nextCompressedFolder",
																								 "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus" },
{ "key": "[ArrowLeft]",                       "command": "previousCompressedFolder",
																								 "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus" },
{ "key": "[Delete]",                          "command": "remote.tunnel.closeInline",
																								 "when": "tunnelCloseable && tunnelViewFocus" },
{ "key": "cmd+[Backspace]",                   "command": "remote.tunnel.closeInline",
																								 "when": "tunnelCloseable && tunnelViewFocus" },
{ "key": "cmd+[KeyC]",                        "command": "remote.tunnel.copyAddressInline",
																								 "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
{ "key": "[Enter]",                           "command": "remote.tunnel.label",
																								 "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
{ "key": "[Enter]",                           "command": "renameFile",
																								 "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
{ "key": "[F5]",                              "command": "workbench.action.debug.continue",
																								 "when": "debugState == 'stopped'" },
{ "key": "[F11]",                             "command": "workbench.action.debug.stepInto",
																								 "when": "debugState != 'inactive'" },
{ "key": "shift+[Escape]",                    "command": "closeReferenceSearch",
																								 "when": "referenceSearchVisible && !config.editor.stablePeek" },
{ "key": "[Escape]",                          "command": "closeReferenceSearch",
																								 "when": "referenceSearchVisible && !config.editor.stablePeek" },
{ "key": "[Escape]",                          "command": "notifications.hideList",
																								 "when": "notificationCenterVisible" },
{ "key": "ctrl+[Minus]",                      "command": "workbench.action.quickInputBack",
																								 "when": "inQuickOpen" },
{ "key": "ctrl+[Tab]",                        "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
																								 "when": "inEditorsPicker && inQuickOpen" },
{ "key": "cmd+[KeyP]",                        "command": "workbench.action.quickOpenNavigateNextInFilePicker",
																								 "when": "inFilesPicker && inQuickOpen" },
{ "key": "ctrl+[KeyR]",                       "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
																								 "when": "inQuickOpen && inRecentFilesPicker" },
{ "key": "ctrl+[KeyQ]",                       "command": "workbench.action.quickOpenNavigateNextInViewPicker",
																								 "when": "inQuickOpen && inViewsPicker" },
{ "key": "ctrl+shift+[Tab]",                  "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
																								 "when": "inEditorsPicker && inQuickOpen" },
{ "key": "shift+cmd+[KeyP]",                  "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
																								 "when": "inFilesPicker && inQuickOpen" },
{ "key": "ctrl+shift+[KeyR]",                 "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
																								 "when": "inQuickOpen && inRecentFilesPicker" },
{ "key": "ctrl+shift+[KeyQ]",                 "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
																								 "when": "inQuickOpen && inViewsPicker" },
{ "key": "ctrl+[KeyN]",                       "command": "workbench.action.quickOpenSelectNext",
																								 "when": "inQuickOpen" },
{ "key": "ctrl+[KeyP]",                       "command": "workbench.action.quickOpenSelectPrevious",
																								 "when": "inQuickOpen" },
{ "key": "cmd+[KeyR]",                        "command": "workbench.action.reloadWindow",
																								 "when": "isDevelopment" },
{ "key": "shift+cmd+[KeyF]",                  "command": "workbench.action.terminal.searchWorkspace",
																								 "when": "terminalFocus && terminalProcessSupported && terminalTextSelected" },
{ "key": "alt+cmd+[KeyI]",                    "command": "workbench.action.toggleDevTools",
																								 "when": "isDevelopment" },
{ "key": "[Escape]",                          "command": "notifications.hideToasts",
																								 "when": "notificationFocus && notificationToastsVisible" },
{ "key": "[F10]",                             "command": "extension.node-debug.startWithStopOnEntry",
																								 "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'" },
{ "key": "cmd+[KeyK] alt+cmd+[KeyS]",         "command": "git.stageSelectedRanges",
																								 "when": "isInDiffEditor" },
{ "key": "shift+cmd+[KeyV]",                  "command": "markdown.showPreview",
																								 "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
{ "key": "shift+alt+[F12]",                   "command": "references-view.findReferences",
																								 "when": "editorHasReferenceProvider" },
{ "key": "[F11]",                             "command": "extension.node-debug.startWithStopOnEntry",
																								 "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'" },
{ "key": "cmd+[KeyK] cmd+[KeyN]",             "command": "git.unstageSelectedRanges",
																								 "when": "isInDiffEditor" },
{ "key": "cmd+[KeyK] [KeyV]",                 "command": "markdown.showPreviewToSide",
																								 "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
{ "key": "[F4]",                              "command": "references-view.next",
																								 "when": "reference-list.hasResult && references-view.canNavigate" },
{ "key": "cmd+[KeyK] cmd+[KeyR]",             "command": "git.revertSelectedRanges",
																								 "when": "isInDiffEditor" },
{ "key": "shift+[F4]",                        "command": "references-view.prev",
																								 "when": "reference-list.hasResult && references-view.canNavigate" },
{ "key": "shift+alt+[KeyH]",                  "command": "references-view.showCallHierarchy",
																								 "when": "editorHasCallHierarchyProvider" },
{ "key": "shift+alt+[KeyB]",                  "command": "extension.applescript.compile",
																								 "when": "editorFocus && editorLangId == 'applescript'" },
{ "key": "alt+cmd+[KeyI]",                    "command": "extension.incrementSelection",
																								 "when": "editorTextFocus" },
{ "key": "shift+cmd+[KeyR]",                  "command": "extension.vsKubernetesDescribe.Refresh",
																								 "when": "vscodeKubernetesDescribeContext" },
{ "key": "[ArrowLeft]",                       "command": "gitlens.key.left",
																								 "when": "gitlens:key:left" },
{ "key": "shift+[Enter]",                     "command": "jupyter.execSelectionInteractive",
																								 "when": "editorTextFocus && isWorkspaceTrusted && jupyter.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
{ "key": "[KeyF]",                            "command": "notebook.find",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "shift+[Enter]",                     "command": "python.execSelectionInTerminal",
																								 "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
{ "key": "shift+alt+[KeyR]",                  "command": "remote-wsl.revealInExplorer",
																								 "when": "false" },
{ "key": "shift+alt+[KeyR]",                  "command": "extension.applescript.run",
																								 "when": "editorFocus && editorLangId == 'applescript'" },
{ "key": "alt+[ArrowLeft]",                   "command": "gitlens.key.alt+left",
																								 "when": "gitlens:key:alt+left" },
{ "key": "shift+[Enter]",                     "command": "jupyter.runcurrentcelladvance",
																								 "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused" },
{ "key": "[KeyK]",                            "command": "list.focusUp",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+[KeyR]",                        "command": "python.refreshTensorBoard",
																								 "when": "python.hasActiveTensorBoardSession" },
{ "key": "cmd+[ArrowLeft]",                   "command": "gitlens.key.ctrl+left",
																								 "when": "gitlens:key:ctrl+left" },
{ "key": "ctrl+[Enter]",                      "command": "jupyter.runcurrentcell",
																								 "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused" },
{ "key": "[KeyJ]",                            "command": "list.focusDown",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "[ArrowRight]",                      "command": "gitlens.key.right",
																								 "when": "gitlens:key:right" },
{ "key": "alt+[Enter]",                       "command": "jupyter.runcurrentcellandaddbelow",
																								 "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused" },
{ "key": "[KeyA]",                            "command": "notebook.cell.insertCodeCellAboveAndFocusContainer",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+[ArrowRight]",                  "command": "gitlens.key.alt+right",
																								 "when": "gitlens:key:alt+right" },
{ "key": "shift+[Enter]",                     "command": "interactive.execute",
																								 "when": "resourceScheme == 'vscode-interactive'" },
{ "key": "[KeyB]",                            "command": "notebook.cell.insertCodeCellBelowAndFocusContainer",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+[ArrowRight]",                  "command": "gitlens.key.ctrl+right",
																								 "when": "gitlens:key:ctrl+right" },
{ "key": "[Escape]",                          "command": "interactive.input.clear",
																								 "when": "!LinkedEditingInputVisible && !accessibilityHelpWidgetVisible && !breakpointWidgetVisible && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !exceptionWidgetVisible && !findWidgetVisible && !inSnippetMode && !isComposing && !markersNavigationVisible && !notificationToastsVisible && !parameterHintsVisible && !renameInputVisible && !selectionAnchorSet && !suggestWidgetVisible && resourceScheme == 'vscode-interactive'" },
{ "key": "[KeyD] [KeyD]",                     "command": "notebook.cell.delete",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+[Comma]",                       "command": "gitlens.key.alt+,",
																								 "when": "gitlens:key:," },
{ "key": "ctrl+[Semicolon] [KeyS]",           "command": "jupyter.insertCellBelowPosition",
																								 "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "[KeyZ]",                            "command": "undo",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+[Period]",                      "command": "gitlens.key.alt+.",
																								 "when": "gitlens:key:." },
{ "key": "ctrl+[Semicolon] [KeyB]",           "command": "jupyter.insertCellBelow",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "[KeyS]",                            "command": "workbench.action.files.save",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "[Escape]",                          "command": "gitlens.key.escape",
																								 "when": "editorTextFocus && gitlens:key:escape && !findWidgetVisible && !isInEmbeddedEditor && !renameInputVisible && !suggestWidgetVisible" },
{ "key": "ctrl+[Semicolon] [KeyA]",           "command": "jupyter.insertCellAbove",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "[KeyC]",                            "command": "notebook.cell.copy",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+[Slash]",                       "command": "gitlens.gitCommands",
																								 "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+[Semicolon] [KeyX]",           "command": "jupyter.deleteCells",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "[KeyX]",                            "command": "notebook.cell.cut",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+cmd+[KeyG] [Slash]",            "command": "gitlens.gitCommands",
																								 "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+shift+alt+[BracketLeft]",      "command": "jupyter.extendSelectionByCellAbove",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "[KeyV]",                            "command": "notebook.cell.paste",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+[KeyB]",                        "command": "gitlens.toggleFileBlame",
																								 "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/" },
{ "key": "ctrl+shift+alt+[BracketRight]",     "command": "jupyter.extendSelectionByCellBelow",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "shift+[KeyL]",                      "command": "notebook.toggleLineNumbers",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+cmd+[KeyG] [KeyB]",             "command": "gitlens.toggleFileBlame",
																								 "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/" },
{ "key": "ctrl+[Semicolon] [KeyU]",           "command": "jupyter.moveCellsUp",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "[KeyO]",                            "command": "notebook.cell.toggleOutputs",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "shift+alt+[KeyB]",                  "command": "gitlens.toggleCodeLens",
																								 "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+[Semicolon] [KeyD]",           "command": "jupyter.moveCellsDown",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "[KeyL]",                            "command": "notebook.cell.toggleLineNumbers",
																								 "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+cmd+[KeyG] shift+[KeyB]",       "command": "gitlens.toggleCodeLens",
																								 "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+[Semicolon] [KeyM]",           "command": "jupyter.changeCellToMarkdown",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "ctrl+shift+[Minus]",                "command": "notebook.cell.split",
																								 "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
{ "key": "alt+[KeyH]",                        "command": "gitlens.showQuickFileHistory",
																								 "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+[Semicolon] [KeyC]",           "command": "jupyter.changeCellToCode",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "ctrl+[Enter]",                      "command": "notebook.cell.executeAndFocusContainer",
																								 "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused" },
{ "key": "alt+cmd+[KeyG] [KeyH]",             "command": "gitlens.showQuickFileHistory",
																								 "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+alt+[BracketRight]",           "command": "jupyter.gotoNextCellInFile",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "shift+[Enter]",                     "command": "notebook.cell.executeAndSelectBelow",
																								 "when": "notebookCellListFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused" },
{ "key": "shift+alt+[KeyH]",                  "command": "gitlens.showQuickRepoHistory",
																								 "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+alt+[BracketLeft]",            "command": "jupyter.gotoPrevCellInFile",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "alt+cmd+[KeyG] shift+[KeyH]",       "command": "gitlens.showQuickRepoHistory",
																								 "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+alt+[Backslash]",              "command": "jupyter.selectCellContents",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "alt+[KeyS]",                        "command": "gitlens.showQuickRepoStatus",
																								 "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+shift+alt+[Backslash]",        "command": "jupyter.selectCell",
																								 "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "alt+cmd+[KeyG] [KeyS]",             "command": "gitlens.showQuickRepoStatus",
																								 "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "cmd+[KeyR]",                        "command": "jupyter.refreshDataViewer",
																								 "when": "isWorkspaceTrusted && jupyter.dataViewerActive" },
{ "key": "alt+[KeyC]",                        "command": "gitlens.showQuickCommitFileDetails",
																								 "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+shift+[Enter]",                "command": "jupyter.runAndDebugCell" },
{ "key": "alt+cmd+[KeyG] [KeyC]",             "command": "gitlens.showQuickCommitFileDetails",
																								 "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "[F10]",                             "command": "jupyter.runByLine",
																								 "when": "!jupyter.notebookeditor.debuggingInProgress && !jupyter.notebookeditor.runByLineInProgress && notebookKernelCount > 0" },
{ "key": "alt+[Comma]",                       "command": "gitlens.diffWithPrevious",
																								 "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "[F10]",                             "command": "jupyter.runByLineNext",
																								 "when": "jupyter.notebookeditor.runByLineInProgress" },
{ "key": "alt+cmd+[KeyG] [Comma]",            "command": "gitlens.diffWithPrevious",
																								 "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+[Enter]",                      "command": "jupyter.runByLineStop",
																								 "when": "jupyter.notebookeditor.runByLineInProgress && notebookKernelCount > 0" },
{ "key": "alt+[Comma]",                       "command": "gitlens.diffWithPreviousInDiffLeft",
																								 "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "alt+cmd+[KeyG] [Comma]",            "command": "gitlens.diffWithPreviousInDiffLeft",
																								 "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "alt+[Comma]",                       "command": "gitlens.diffWithPreviousInDiffRight",
																								 "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "alt+cmd+[KeyG] [Comma]",            "command": "gitlens.diffWithPreviousInDiffRight",
																								 "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "alt+[Period]",                      "command": "gitlens.diffWithNext",
																								 "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "alt+cmd+[KeyG] [Period]",           "command": "gitlens.diffWithNext",
																								 "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "alt+[Period]",                      "command": "gitlens.diffWithNextInDiffLeft",
																								 "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "alt+cmd+[KeyG] [Period]",           "command": "gitlens.diffWithNextInDiffLeft",
																								 "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "alt+[Period]",                      "command": "gitlens.diffWithNextInDiffRight",
																								 "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "alt+cmd+[KeyG] [Period]",           "command": "gitlens.diffWithNextInDiffRight",
																								 "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "shift+alt+[Period]",                "command": "gitlens.diffWithWorking",
																								 "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "alt+cmd+[KeyG] shift+[Period]",     "command": "gitlens.diffWithWorking",
																								 "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "shift+alt+[Comma]",                 "command": "gitlens.diffLineWithPrevious",
																								 "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "alt+cmd+[KeyG] shift+[Comma]",      "command": "gitlens.diffLineWithPrevious",
																								 "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+shift+[KeyG]",                 "command": "workbench.view.scm",
																								 "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "cmd+[KeyC]",                        "command": "gitlens.views.branches.copy",
																								 "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/" },
{ "key": "cmd+[KeyC]",                        "command": "gitlens.views.commits.copy",
																								 "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/" },
{ "key": "cmd+[KeyC]",                        "command": "gitlens.views.contributors.copy",
																								 "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/" },
{ "key": "cmd+[KeyC]",                        "command": "gitlens.views.fileHistory.copy",
																								 "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/" },
{ "key": "cmd+[KeyC]",                        "command": "gitlens.views.lineHistory.copy",
																								 "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/" },
{ "key": "cmd+[KeyC]",                        "command": "gitlens.views.remotes.copy",
																								 "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/" },
{ "key": "cmd+[KeyC]",                        "command": "gitlens.views.repositories.copy",
																								 "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/" },
{ "key": "cmd+[KeyC]",                        "command": "gitlens.views.stashes.copy",
																								 "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/" },
{ "key": "cmd+[KeyC]",                        "command": "gitlens.views.searchAndCompare.copy",
																								 "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/" },
{ "key": "cmd+[KeyC]",                        "command": "gitlens.views.tags.copy",
																								 "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/" }
]
